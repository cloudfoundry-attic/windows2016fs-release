// Code generated by counterfeiter. DO NOT EDIT.
package layerfakes

import (
	"oci-image/layer"
	"sync"

	"github.com/Microsoft/hcsshim"
)

type FakeWriter struct {
	WriteLayerStub        func(string) error
	writeLayerMutex       sync.RWMutex
	writeLayerArgsForCall []struct {
		arg1 string
	}
	writeLayerReturns struct {
		result1 error
	}
	writeLayerReturnsOnCall map[int]struct {
		result1 error
	}
	SetHCSLayerWriterStub        func(hcsshim.DriverInfo, string, []string) error
	setHCSLayerWriterMutex       sync.RWMutex
	setHCSLayerWriterArgsForCall []struct {
		arg1 hcsshim.DriverInfo
		arg2 string
		arg3 []string
	}
	setHCSLayerWriterReturns struct {
		result1 error
	}
	setHCSLayerWriterReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWriter) WriteLayer(arg1 string) error {
	fake.writeLayerMutex.Lock()
	ret, specificReturn := fake.writeLayerReturnsOnCall[len(fake.writeLayerArgsForCall)]
	fake.writeLayerArgsForCall = append(fake.writeLayerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("WriteLayer", []interface{}{arg1})
	fake.writeLayerMutex.Unlock()
	if fake.WriteLayerStub != nil {
		return fake.WriteLayerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeLayerReturns.result1
}

func (fake *FakeWriter) WriteLayerCallCount() int {
	fake.writeLayerMutex.RLock()
	defer fake.writeLayerMutex.RUnlock()
	return len(fake.writeLayerArgsForCall)
}

func (fake *FakeWriter) WriteLayerArgsForCall(i int) string {
	fake.writeLayerMutex.RLock()
	defer fake.writeLayerMutex.RUnlock()
	return fake.writeLayerArgsForCall[i].arg1
}

func (fake *FakeWriter) WriteLayerReturns(result1 error) {
	fake.WriteLayerStub = nil
	fake.writeLayerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWriter) WriteLayerReturnsOnCall(i int, result1 error) {
	fake.WriteLayerStub = nil
	if fake.writeLayerReturnsOnCall == nil {
		fake.writeLayerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeLayerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWriter) SetHCSLayerWriter(arg1 hcsshim.DriverInfo, arg2 string, arg3 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.setHCSLayerWriterMutex.Lock()
	ret, specificReturn := fake.setHCSLayerWriterReturnsOnCall[len(fake.setHCSLayerWriterArgsForCall)]
	fake.setHCSLayerWriterArgsForCall = append(fake.setHCSLayerWriterArgsForCall, struct {
		arg1 hcsshim.DriverInfo
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("SetHCSLayerWriter", []interface{}{arg1, arg2, arg3Copy})
	fake.setHCSLayerWriterMutex.Unlock()
	if fake.SetHCSLayerWriterStub != nil {
		return fake.SetHCSLayerWriterStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setHCSLayerWriterReturns.result1
}

func (fake *FakeWriter) SetHCSLayerWriterCallCount() int {
	fake.setHCSLayerWriterMutex.RLock()
	defer fake.setHCSLayerWriterMutex.RUnlock()
	return len(fake.setHCSLayerWriterArgsForCall)
}

func (fake *FakeWriter) SetHCSLayerWriterArgsForCall(i int) (hcsshim.DriverInfo, string, []string) {
	fake.setHCSLayerWriterMutex.RLock()
	defer fake.setHCSLayerWriterMutex.RUnlock()
	return fake.setHCSLayerWriterArgsForCall[i].arg1, fake.setHCSLayerWriterArgsForCall[i].arg2, fake.setHCSLayerWriterArgsForCall[i].arg3
}

func (fake *FakeWriter) SetHCSLayerWriterReturns(result1 error) {
	fake.SetHCSLayerWriterStub = nil
	fake.setHCSLayerWriterReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWriter) SetHCSLayerWriterReturnsOnCall(i int, result1 error) {
	fake.SetHCSLayerWriterStub = nil
	if fake.setHCSLayerWriterReturnsOnCall == nil {
		fake.setHCSLayerWriterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setHCSLayerWriterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeLayerMutex.RLock()
	defer fake.writeLayerMutex.RUnlock()
	fake.setHCSLayerWriterMutex.RLock()
	defer fake.setHCSLayerWriterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ layer.Writer = new(FakeWriter)
